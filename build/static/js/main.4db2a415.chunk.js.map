{"version":3,"sources":["store/actions/constants.js","store/actions/blogActions.js","components/Blog/Bloglist.js","components/Dashboard/Dashboard.js","components/Blog/BlogDetails.js","store/reducers/blogReducer.js","sagas/getBlogsSaga.js","sagas/rootSaga.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["BLOGS","setBlogs","blogs","type","Bloglist","this","props","loadBlogs","id","Component","connect","dispatch","Dashboard","className","BlogDetails","match","params","blogReducer","state","getBlogsSaga","axios","get","then","response","data","catch","error","console","log","displayBlogs","rootSaga","call","put","takeEvery","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","run","library","add","faTrash","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iSAAMA,EACI,aADJA,EAEY,qBCIZC,EAAW,SAACC,GAAD,MAAY,CACzBC,KAAMH,EAAoBE,UCDxBE,E,kLAEEC,KAAKC,MAAMC,c,+BAIL,IACEL,EAAUG,KAAKC,MAAfJ,MAER,OACI,6BACI,4BAAKA,EAAM,GAAGM,S,GAXPC,aA0BRC,eAPS,SAAAR,GAAK,MAAK,CAC9BA,YAEuB,SAAAS,GAAQ,MAAK,CACpCJ,UAAW,kBAAMI,ED3BI,CACrBR,KAAMH,QC6BKU,CAA6CN,GCwC7CQ,EAnEf,uKAuCQ,OACI,yBAAKC,UAAU,aACX,wBAAIA,UAAU,2BAAd,aAGA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,oBAGf,yBAAKA,UAAU,mBACb,kBAAC,EAAD,cAlDtB,GAA+BJ,aCWhBK,EAdK,SAACR,GACjB,IAAME,EAAKF,EAAMS,MAAMC,OAAOR,GAE9B,OACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,cAAhB,WAAsCL,GACtC,uBAAGK,UAAU,gBAAb,WACA,kD,QCCAI,EATK,WAAgC,IAA/BC,EAA8B,uDAAtB,GAAsB,yCAAjBf,EAAiB,EAAjBA,KAAMD,EAAW,EAAXA,MACpC,OAAOC,GACJ,KAAKH,EACD,OAAOE,EACX,QACI,OAAOgB,I,kDCJbC,EAAe,WACnB,OAAOC,IACNC,IAJa,gCAKbC,MAAK,SAAUC,GAEd,OADaA,EAASC,QAGvBC,OAAM,SAAUC,GACfC,QAAQC,IAAIF,O,WCNNG,G,WAMAC,GANV,SAAUD,IAAV,uEACkB,OADlB,SACwBE,YAAKZ,GAD7B,OAEI,OADMjB,EADV,gBAEU8B,YAAI/B,EAASC,IAFvB,uCAMA,SAAU4B,IAAV,iEACI,OADJ,SACUG,YAAUjC,EAAY6B,GADhC,uCAIeC,QCGAI,EAZQ,WACnB,IAAMC,EAAiBC,cACjBC,EAAQC,YACVC,EACAC,YACIC,YAAgBN,KAIxB,OADAA,EAAeO,IAAIZ,GACZO,GCLXM,IAAQC,IAAIC,KAEZ,IAAMR,EAAQH,IAyBCY,E,uKArBX,OACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAD,KACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,UAAWrC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,YAAYC,UAAWnC,e,GAXrCL,aCFEyC,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStC,MACvB,2DCZRuC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,c","file":"static/js/main.4db2a415.chunk.js","sourcesContent":["const BLOGS = {\n    LOAD: 'BLOGS_LOAD',\n    LOAD_SUCCESS: 'BLOGS_LOAD_SUCCESS',\n    LOAD_FAIL: 'BLOGS_LOAD_FAIL',\n}\n\nexport {BLOGS}","import {BLOGS} from './constants'\n\nconst loadBlogs = () => ({\n    type: BLOGS.LOAD,\n})\n\nconst setBlogs = (blogs) => ({\n    type: BLOGS.LOAD_SUCCESS, blogs\n})\n\nexport {\n    loadBlogs,\n    setBlogs\n}","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {loadBlogs} from '../../store/actions/blogActions'\n\n\n\nclass Bloglist extends Component {\n    componentDidMount() {\n        this.props.loadBlogs();\n        \n    }\n\n    render() {\n        const { blogs } = this.props\n        \n        return (\n            <div>\n                <h1>{blogs[0].id}</h1>\n            </div>\n        )\n    }\n}\n\n\n\nconst mapStateToProps = blogs => ({\n    blogs\n})\nconst mapDispatchToProps = dispatch => ({\n    loadBlogs: () => dispatch(loadBlogs()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Bloglist)\n","// import List from '../Blog/List'\nimport React, { Component } from 'react';\n// import AddBlog from '../Blog/AddBlog';\nimport Bloglist from '../Blog/Bloglist';\n\nexport class Dashboard extends Component {\n    // state = {\n    //     blogs: []\n    //   }\n      // deleteBlog = (id) => {\n      //   const blogs = this.state.blogs.filter(blog => {\n      //     return blog.id !== id;\n      //   })\n      //   this.setState({\n      //     blogs\n      //   })\n      // }\n    \n      // editBlog = (updatedblog, id, name) => {\n      //   const blogs = this.state.blogs;\n      //   blogs.map(blog => {\n      //     if(blog.id === id){\n      //        if(name === 'title'){\n      //            blog.title = updatedblog;\n      //        }\n      //        else{\n      //            blog.content = updatedblog;\n      //        }\n      //     }\n      //     this.setState({\n      //       blogs\n      //     })\n      //   })\n      // }\n    \n      // addBlog = (blog) => {\n      //   blog.id = Math.random();\n      //   let blogs = [...this.state.blogs, blog];\n      //   this.setState({\n      //     blogs\n      //   })\n      //   console.log(this.state)\n      // }\n    render() {\n        return (\n            <div className=\"dashboard\">\n                <h1 className=\"appTitle container mb-5\">\n                    Blog List\n                </h1>\n                <div className=\"container\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-6 col-12\">\n                      {/* <AddBlog/> */}\n                    </div>\n                    <div className=\"col-sm-6 col-12\">\n                      <Bloglist />\n                    </div>\n                  </div>\n                </div>\n                {/* <List blogs={this.state.blogs} deleteBlog={this.deleteBlog} editBlog={this.editBlog}/> */}\n            </div>\n        )\n    }\n}\n\n// const mapStateToProps = (state) => {\n//   return {\n//     blogs : state.blog.blogs\n//   }\n// }\n\n// export default connect(mapStateToProps)(Dashboard)\nexport default Dashboard\n","import React from 'react'\n\nconst BlogDetails = (props) => {\n    const id = props.match.params.id;\n\n    return (\n        <div className=\"blogdetails\">\n            <div className=\"card\">\n                <span className=\"card-title\">Title - {id}</span>\n                <p className=\"blog-content\">lorem40</p>\n                <div>Posted by User</div>\n            </div>\n        </div>\n    )\n}\n\nexport default BlogDetails\n","import {BLOGS} from '../actions/constants'\n\n const blogReducer = (state = {}, {type, blogs}) => {\n     switch(type){\n        case BLOGS.LOAD_SUCCESS:\n            return blogs;\n        default:\n            return state;\n     }\n }\n\n export default blogReducer;","import axios from 'axios'\nconst API_URL = \"http://localhost:3004/blogs/\";\n\nconst getBlogsSaga = () => {\n  return axios\n  .get(API_URL)\n  .then(function (response) {\n    const data = response.data;\n    return data;\n  })\n  .catch(function (error) {\n    console.log(error);\n });\n}\n\nexport {getBlogsSaga}","import {takeEvery, call, put, select, take} from 'redux-saga/effects'\nimport {BLOGS} from '../store/actions/constants'\nimport {getBlogsSaga} from './getBlogsSaga'\nimport {setBlogs} from '../store/actions/blogActions'\n\nfunction* displayBlogs() {\n    const blogs = yield call(getBlogsSaga);\n    yield put(setBlogs(blogs))\n}\n\n//watcher saga\nfunction* rootSaga() {\n    yield takeEvery(BLOGS.LOAD, displayBlogs)\n}\n\nexport default rootSaga;","import {createStore, applyMiddleware, compose} from 'redux';\nimport rootReducer from './reducers/blogReducer';\nimport createSagaMiddleware from 'redux-saga'\nimport rootSaga from '../sagas/rootSaga'\n\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const store = createStore(\n        rootReducer,\n        compose(\n            applyMiddleware(sagaMiddleware)\n        )\n    )\n    sagaMiddleware.run(rootSaga)\n    return store;\n}\n\nexport default configureStore;","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport Dashboard from './components/Dashboard/Dashboard'\nimport BlogDetails from './components/Blog/BlogDetails'\nimport {Provider} from 'react-redux'\nimport configureStore from './store/store'\n\nlibrary.add(faTrash)\n\nconst store = configureStore()\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <Switch>\n                    <Route exact path='/' component={Dashboard}/>\n                    <Route path='/blog/:id' component={BlogDetails}/>\n                  </Switch>\n                </div>\n              </div>\n            </div>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n    ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}